datePoint = as.Date(time), # date only
timePoint = times(strftime(time,"%H:%M:%S")) # extracts only the time
)
ggplot(data = er_GPX, aes(x = longitude, y = latitude, text=pointName)) +
geom_point()+
geom_line()
#theme(legend.p
ggplot(data = er_GPX, aes(x = longitude, y = latitude, text=pointName)) +
geom_point()
#theme(legend.position="none")+ # remove legends
xlab("Longitude")+
ylab("Latitude")+
theme_classic()
ggplot(data = er_GPX, aes(x = longitude, y = latitude, text=pointName)) +
geom_point()+
#theme(legend.position="none")+ # remove legends
xlab("Longitude")+
ylab("Latitude")+
theme_classic()
g <- ggplot(data = er_GPX, aes(x = longitude, y = latitude, text=pointName)) +
geom_point()+
geom_path()+
#theme(legend.position="none")+ # remove legends
xlab("Longitude")+
ylab("Latitude")+
theme_classic()
ggplot(data = er_GPX, aes(x = longitude, y = latitude, text=pointName)) +
geom_point()+
geom_path()+
#theme(legend.position="none")+ # remove legends
xlab("Longitude")+
ylab("Latitude")+
theme_classic()
ggplot(data = er_GPX, aes(x = longitude, y = latitude, text=pointName)) +
geom_point()+
geom_line()+
#theme(legend.position="none")+ # remove legends
xlab("Longitude")+
ylab("Latitude")+
theme_classic()
ggplot(data = er_GPX, aes(x = longitude, y = latitude, text=pointName)) +
geom_point()+
geom_line()+
#theme(legend.position="none")+ # remove legends
xlab("Longitude")+
ylab("Latitude")+
theme_classic()
ggplot(data = er_GPX, aes(x = longitude, y = latitude, text=pointName, group = datePoint)) +
geom_point()+
geom_line()+
#theme(legend.position="none")+ # remove legends
xlab("Longitude")+
ylab("Latitude")+
theme_classic()
View(er_GPX)
er_GPX <- readOGR(gpx, layer="waypoints") %>% # select waypoints from GPX file input
as.data.frame() %>%
transmute(
longitude = coords.x1,
latitude = coords.x2,
pointName = name,
elevation = ele,
datePoint = as.Date(time), # date only
timePoint = times(strftime(time,"%H:%M:%S")# extracts only the time
session = am(times(strftime(time,"%H:%M:%S")))
)
#}
#getGPS()
##### GGMAP for session points
#leftNudge <- (max(er_GPX$latitude)-min(er_GPX$latitude))/10
#g <-
ggplot(data = er_GPX, aes(x = longitude, y = latitude, text=pointName, group = datePoint)) +
geom_point()+
geom_line()+
#theme(legend.position="none")+ # remove legends
xlab("Longitude")+
ylab("Latitude")+
theme_classic()
ggplotly(g, tooltip="text")
leaflet()%>%
addTiles('http://meerkatvisuals.kalahariresearch.org/static/googleTiles/{z}/{x}/{y}.jfif',
options = tileOptions(minZoom = 11, maxZoom = 19))%>%
addMarkers(data=er_GPX,~longitude, ~latitude, label=~pointName,  labelOptions = labelOptions(noHide = T))
#addLabelOnlyMarkers(data=er_GPX,~longitude, ~latitude, label=~pointName, labelOptions = labelOptions(noHide = T))
####################
### Write file
# points from db
b <- con %>% dbGetQuery("SELECT * FROM Meerkatdatabase.tblBurrows")
# will need to process points from Easting and northing to lat long
b[is.na(b)] <- 0
# All burrows
dfBurrows <- cbind(b$Latitude, b$Longitude)%>% # generate coordinates
SpatialPoints() %>% # convert to spatial points
SpatialPointsDataFrame(b) # rejoin rest of point info and convert to spatial df
# select points
sel <- b %>%
filter(BurrowNumber %in% c("LE11A", "LE06A")) %>%
dplyr::select(name=BurrowNumber, Latitude, Longitude)
# convert to spatial point
point <- cbind(sel$Longitude, sel$Latitude)%>% # generate coordinates
SpatialPoints(proj4string=CRS("+proj=longlat + ellps=WGS84")) %>% # convert to spatial points and add projection
SpatialPointsDataFrame(sel) # rejoin rest of point info and convert to spatial df
# write GPS file
writeOGR(point["name"], driver="GPX", layer="waypoints", dsn="points.gpx")
er_GPX <- readOGR(gpx, layer="waypoints") %>% # select waypoints from GPX file input
as.data.frame() %>%
transmute(
longitude = coords.x1,
latitude = coords.x2,
pointName = name,
elevation = ele,
datePoint = as.Date(time), # date only
timePoint = times(strftime(time,"%H:%M:%S")# extracts only the time
session = am(times(strftime(time,"%H:%M:%S"))))
)
er_GPX <- readOGR(gpx, layer="waypoints") %>% # select waypoints from GPX file input
as.data.frame() %>%
transmute(
longitude = coords.x1,
latitude = coords.x2,
pointName = name,
elevation = ele,
datePoint = as.Date(time), # date only
timePoint = times(strftime(time,"%H:%M:%S"))# extracts only the time
session = am(times(strftime(time,"%H:%M:%S")))
)
er_GPX <- readOGR(gpx, layer="waypoints") %>% # select waypoints from GPX file input
as.data.frame() %>%
transmute(
longitude = coords.x1,
latitude = coords.x2,
pointName = name,
elevation = ele,
datePoint = as.Date(time), # date only
timePoint = times(strftime(time,"%H:%M:%S")),# extracts only the time
session = am(times(strftime(time,"%H:%M:%S")))
)
er_GPX <- readOGR(gpx, layer="waypoints") %>% # select waypoints from GPX file input
as.data.frame() %>%
transmute(
longitude = coords.x1,
latitude = coords.x2,
pointName = name,
elevation = ele,
datePoint = as.Date(time), # date only
timePoint = times(strftime(time,"%H:%M:%S"))# extracts only the time
)
ggplot(data = er_GPX, aes(x = longitude, y = latitude, text=pointName, group = datePoint)) +
geom_point()+
geom_line()+
#theme(legend.position="none")+ # remove legends
xlab("Longitude")+
ylab("Latitude")+
theme_classic()
shiny::runApp('//KRCSERVER/22_MeerkatManagers/01_MANAGEMENT/2.DataWork/1.Development/MeerkatDatabase2.0/ManagementQueries/app_WholeSheBang/WholeSheBang')
runApp('//KRCSERVER/22_MeerkatManagers/01_MANAGEMENT/2.DataWork/1.Development/MeerkatDatabase2.0/ManagementQueries/app_WholeSheBang/WholeSheBang')
runApp('//KRCSERVER/22_MeerkatManagers/01_MANAGEMENT/2.DataWork/1.Development/MeerkatDatabase2.0/ManagementQueries/app_WholeSheBang/WholeSheBang')
burrows <- function(){
b <- con %>% dbGetQuery("SELECT * FROM Meerkatdatabase.tblBurrows")
# will need to process points from Easting and northing to lat long
b[is.na(b)] <- 0
head(b, n=100L)  # remove this after
}
burrows()
head(burrows())
head(burrows()) %>% dplyr::select(BurrowNumber, Longitude, Latitude)
head(burrows()) %>% dplyr::select(BurrowNumber, Longitude, Latitude) filter(Longitude !=0)
head(burrows()) %>% dplyr::select(BurrowNumber, Longitude, Latitude) %>% filter(Longitude !=0)
test <- head(burrows()) %>% dplyr::select(BurrowNumber, Longitude, Latitude) %>% filter(Longitude !=0)
writeGPX <- function(points){
# convert to spatial point
point <- cbind(sel$Longitude, sel$Latitude)%>% # generate coordinates
SpatialPoints(proj4string=CRS("+proj=longlat + ellps=WGS84")) %>% # convert to spatial points and add projection
SpatialPointsDataFrame(sel) # rejoin rest of point info and convert to spatial df
# write GPS file
writeOGR(point["name"], driver="GPX", layer="waypoints", dsn="points.gpx")
}
writeGPX <- function(pointdf){
# convert to spatial point
point <- cbind(pointdf$Longitude, pointdf$Latitude)%>% # generate coordinates
SpatialPoints(proj4string=CRS("+proj=longlat + ellps=WGS84")) %>% # convert to spatial points and add projection
SpatialPointsDataFrame(pointdf) # rejoin rest of point info and convert to spatial df
# write GPS file
writeOGR(point["name"], driver="GPX", layer="waypoints", dsn="points.gpx")
}
setwd(choose.dir()) # choose working directory
writeGPX <- function(pointdf){
# convert to spatial point
point <- cbind(pointdf$Longitude, pointdf$Latitude)%>% # generate coordinates
SpatialPoints(proj4string=CRS("+proj=longlat + ellps=WGS84")) %>% # convert to spatial points and add projection
SpatialPointsDataFrame(pointdf) # rejoin rest of point info and convert to spatial df
# write GPS file
writeOGR(point["name"], driver="GPX", layer="waypoints", dsn="points.gpx")
}
writeGPX(test)
test
point <- cbind(test$Longitude, test$Latitude)%>% # generate coordinates
SpatialPoints(proj4string=CRS("+proj=longlat + ellps=WGS84")) %>% # convert to spatial points and add projection
SpatialPointsDataFrame(test)
point
writeGPX <- function(pointdf){
# colnames(point) <-
# convert to spatial point
point <- cbind(pointdf$Longitude, pointdf$Latitude)%>% # generate coordinates
SpatialPoints(proj4string=CRS("+proj=longlat + ellps=WGS84")) %>% # convert to spatial points and add projection
SpatialPointsDataFrame(pointdf) # rejoin rest of point info and convert to spatial df
# write GPS file
writeOGR(point[1], driver="GPX", layer="waypoints", dsn="points.gpx")
}
writeGPX(test)
pointdf <- head(burrows()) %>% dplyr::select(BurrowNumber, Longitude, Latitude) %>% filter(Longitude !=0)
point <- cbind(pointdf$Longitude, pointdf$Latitude)%>% # generate coordinates
SpatialPoints(proj4string=CRS("+proj=longlat + ellps=WGS84")) %>% # convert to spatial points and add projection
SpatialPointsDataFrame(pointdf) # rejoin rest of point info and convert to spatial df
point[1]
writeOGR(point[1], driver="GPX", layer="waypoints", dsn="points.gpx")
writeOGR(point["BurrowNumber"], driver="GPX", layer="waypoints", dsn="points.gpx")
writeOGR(point["BurrowNumber"], driver="GPX", layer="waypoints", dsn="points.gpx")
library(tidyverse)
library(maptools)
library(sp)
library(chron)
library(rgdal)
library(RMySQL)
library(ggmap)
library(plotly)
library(tidyverse)
library(maptools)
library(sp)
library(chron)
library(rgdal)
library(RMySQL)
library(shiny)
library(shinythemes)
library(leaflet)
pointdf
point["BurrowNumber"]
b <- con %>% dbGetQuery("SELECT * FROM Meerkatdatabase.tblBurrows")
b[is.na(b)] <- 0
dfBurrows <- cbind(b$Latitude, b$Longitude)%>% # generate coordinates
SpatialPoints() %>% # convert to spatial points
SpatialPointsDataFrame(b) # rejoin rest of point info and convert to spatial df
sel <- b %>%
filter(BurrowNumber %in% c("LE11A", "LE06A")) %>%
dplyr::select(name=BurrowNumber, Latitude, Longitude)
point <- cbind(sel$Longitude, sel$Latitude)%>% # generate coordinates
SpatialPoints(proj4string=CRS("+proj=longlat + ellps=WGS84")) %>% # convert to spatial points and add projection
SpatialPointsDataFrame(sel) # rejoin rest of point info and convert to spatial df
writeOGR(point["name"], driver="GPX", layer="waypoints", dsn="points.gpx")
point
b <- con %>% dbGetQuery("SELECT * FROM Meerkatdatabase.tblBurrows")
b[is.na(b)] <- 0
sel <- b %>%
filter(BurrowNumber %in% c("LE11A", "LE06A")) %>%
dplyr::select(name=BurrowNumber, Latitude, Longitude)
pointdf
sel <- pointdf %>%
#filter(BurrowNumber %in% c("LE11A", "LE06A")) %>%
dplyr::select(name=BurrowNumber, Latitude, Longitude)
point <- cbind(sel$Longitude, sel$Latitude)%>% # generate coordinates
SpatialPoints(proj4string=CRS("+proj=longlat + ellps=WGS84")) %>% # convert to spatial points and add projection
SpatialPointsDataFrame(sel) # rejoin rest of point info and convert to spatial df
writeOGR(point["name"], driver="GPX", layer="waypoints", dsn="points.gpx")
pointdf <- head(burrows()) %>% dplyr::select(BurrowNumber, Longitude, Latitude) %>% filter(Longitude !=0)
sel <- pointdf %>%
dplyr::select(name=BurrowNumber, Latitude, Longitude)
point <- cbind(sel$Longitude, sel$Latitude)%>% # generate coordinates
SpatialPoints(proj4string=CRS("+proj=longlat + ellps=WGS84")) %>% # convert to spatial points and add projection
SpatialPointsDataFrame(sel) # rejoin rest of point info and convert to spatial df
writeOGR(point["name"], driver="GPX", layer="waypoints", dsn="points.gpx")
writeOGR(point["name"], driver="GPX", layer="waypoints", dsn="points.gpx")
pointdf
cbind(pointdf$Longitude, pointdf$Latitude)%>% # generate coordinates
SpatialPoints(proj4string=CRS("+proj=longlat + ellps=WGS84")) %>% # convert to spatial points and add projection
SpatialPointsDataFrame(pointdf)
writeGPX <- function(pointdf){
# select points
sel <- pointdf %>%
dplyr::select(name=BurrowNumber, Latitude, Longitude)
# convert to spatial point
point <- cbind(sel$Longitude, sel$Latitude)%>% # generate coordinates
SpatialPoints(proj4string=CRS("+proj=longlat + ellps=WGS84")) %>% # convert to spatial points and add projection
SpatialPointsDataFrame(sel) # rejoin rest of point info and convert to spatial df
# write GPS file
writeOGR(point["name"], driver="GPX", layer="waypoints", dsn="points.gpx")
}
writeGPX(pointdf)
runApp('//KRCSERVER/22_MeerkatManagers/01_MANAGEMENT/2.DataWork/1.Development/MeerkatDatabase2.0/ManagementQueries/app_WholeSheBang/WholeSheBang')
install.packages("shinyFiles")
install.packages("shinyFiles")
shiny::runApp('//KRCSERVER/22_MeerkatManagers/01_MANAGEMENT/2.DataWork/1.Development/MeerkatDatabase2.0/ManagementQueries/app_WholeSheBang/WholeSheBang')
library(shinyFiles)
shiny::runApp('//KRCSERVER/22_MeerkatManagers/01_MANAGEMENT/2.DataWork/1.Development/MeerkatDatabase2.0/ManagementQueries/app_WholeSheBang/WholeSheBang')
library(shinyFiles)
runApp('//KRCSERVER/22_MeerkatManagers/01_MANAGEMENT/2.DataWork/1.Development/MeerkatDatabase2.0/ManagementQueries/app_WholeSheBang/WholeSheBang')
runApp('//KRCSERVER/22_MeerkatManagers/01_MANAGEMENT/2.DataWork/1.Development/MeerkatDatabase2.0/ManagementQueries/app_WholeSheBang/WholeSheBang')
runApp('//KRCSERVER/22_MeerkatManagers/01_MANAGEMENT/2.DataWork/1.Development/MeerkatDatabase2.0/ManagementQueries/app_WholeSheBang/WholeSheBang')
runApp('//KRCSERVER/22_MeerkatManagers/01_MANAGEMENT/2.DataWork/1.Development/MeerkatDatabase2.0/ManagementQueries/app_WholeSheBang/WholeSheBang')
burrows <- function(){
b <- con %>% dbGetQuery("SELECT * FROM Meerkatdatabase.tblBurrows")
# will need to process points from Easting and northing to lat long
b[is.na(b)] <- 0
head(b, n=100L)  # remove this after
}
burrowChoices <- burrows() %>% pull(BurrowNumber)
burrowChoices
burrow
head(burrow())
head(burrows())
head(burrows()) %>%
paste(sep="", collapse=","
#####
# Write GPX file
# include a df of BurrowNumber, Latitude, Longitude
writeGPX <- function(pointdf){
# select points
sel <- pointdf %>%
dplyr::select(name=BurrowNumber, Latitude, Longitude)
# convert to spatial point
point <- cbind(sel$Longitude, sel$Latitude)%>% # generate coordinates
SpatialPoints(proj4string=CRS("+proj=longlat + ellps=WGS84")) %>% # convert to spatial points and add projection
SpatialPointsDataFrame(sel) # rejoin rest of point info and convert to spatial df
pointName <- sprintf("%s")
# write GPS file
writeOGR(point["name"], driver="GPX", layer="waypoints", dsn="points.gpx")
}
head(burrows()) %>%
paste(sep="", collapse=",")
head(burrows()) %>%
paste(sep=",", collapse=",")
head(burrows()) %>%
dplyr::select(BurrowNumber)%>%
paste(sep=",", collapse=",")
head(burrows()) %>%
dplyr::select(BurrowNumber)%>%
paste(collapse=",")
head(burrows()) %>%
dplyr::select(BurrowNumber)%>%
paste(sep="", collapse=",")
head(burrows()) %>%
dplyr::pull(BurrowNumber)%>%
paste(sep="", collapse=",")
head(burrows()) %>%
dplyr::pull(BurrowNumber)%>%
paste(collapse=", ")
pointName <- sprintf("Upload_%s") now()
now()
today()
library(lubridate)
today()
sprintf("Upload_%s.GPX", today())
runApp('//KRCSERVER/22_MeerkatManagers/01_MANAGEMENT/2.DataWork/1.Development/MeerkatDatabase2.0/ManagementQueries/app_WholeSheBang/WholeSheBang')
runApp('//KRCSERVER/22_MeerkatManagers/01_MANAGEMENT/2.DataWork/1.Development/MeerkatDatabase2.0/ManagementQueries/app_WholeSheBang/WholeSheBang')
now()
sprintf("Upload_%s.gpx", now())
getwd()
setwd("D:\Garmin\GPX") # set working directory to GPS unit
setwd("D:\\Garmin\\GPX") # set working directory to GPS unit
runApp('//KRCSERVER/22_MeerkatManagers/01_MANAGEMENT/2.DataWork/1.Development/MeerkatDatabase2.0/ManagementQueries/app_WholeSheBang/WholeSheBang')
getwd()
burrows <- function(){
b <- con %>% dbGetQuery("SELECT * FROM Meerkatdatabase.tblBurrows")
# will need to process points from Easting and northing to lat long
b[is.na(b)] <- 0
head(b, n=100L)  # remove this after
}
writeGPX <- function(pointdf){
# select points
sel <- pointdf %>%
dplyr::select(name=BurrowNumber, Latitude, Longitude)
# convert to spatial point
point <- cbind(sel$Longitude, sel$Latitude)%>% # generate coordinates
SpatialPoints(proj4string=CRS("+proj=longlat + ellps=WGS84")) %>% # convert to spatial points and add projection
SpatialPointsDataFrame(sel) # rejoin rest of point info and convert to spatial df
pointName <- sprintf("Upload_%s.gpx", now()) # point name
# write GPS file
writeOGR(point["name"], driver="GPX", layer="waypoints", dsn=pointName)
}
writeGPX(head(burrows()))
tail(burrows())
writeGPX(tail(burrows()))
choose.dir()
setwd("D:\\Garmin\\GPX") # set working directory to GPS unit
writeGPX(tail(burrows()))
setwd(choose.dir())
writeGPX(tail(burrows()))
pointdf <- tail(burrows())
sel <- pointdf %>%
dplyr::select(name=BurrowNumber, Latitude, Longitude)
point <- cbind(sel$Longitude, sel$Latitude)%>% # generate coordinates
SpatialPoints(proj4string=CRS("+proj=longlat + ellps=WGS84")) %>% # convert to spatial points and add projection
SpatialPointsDataFrame(sel) # rejoin rest of point info and convert to spatial df
pointName <- sprintf("Upload_%s.gpx", now()) # point name
writeOGR(point["name"], driver="GPX", layer="waypoints", dsn=pointName)
######
# Includes
library(tidyverse)
library(maptools)
library(sp)
library(chron)
library(rgdal)
library(RMySQL)
library(shiny)
library(shinythemes)
library(leaflet)
library(lubridate)
username <- 'shiny'
password <- 'shiny2017'
database <- 'Meerkatdatabase'
address <- '192.168.11.6'
con <- dbConnect(
MySQL(),
user = username,
password = password,
dbname = database,
host = address
)
burrows <- function(){
b <- con %>% dbGetQuery("SELECT * FROM Meerkatdatabase.tblBurrows")
# will need to process points from Easting and northing to lat long
b[is.na(b)] <- 0
head(b, n=100L)  # remove this after
}
writeGPX <- function(pointdf){
# select points
sel <- pointdf %>%
dplyr::select(name=BurrowNumber, Latitude, Longitude)
# convert to spatial point
point <- cbind(sel$Longitude, sel$Latitude)%>% # generate coordinates
SpatialPoints(proj4string=CRS("+proj=longlat + ellps=WGS84")) %>% # convert to spatial points and add projection
SpatialPointsDataFrame(sel) # rejoin rest of point info and convert to spatial df
pointName <- sprintf("D:\\Garmin\\GPX\\Upload_%s.gpx", now()) # point name
# write GPS file
writeOGR(point["name"], driver="GPX", layer="waypoints", dsn=pointName)
}
getwd()
setwd(choose.dir())
pointdf <- tail(burrows())
writeGPX(pointdf)
pointdf
pointdf <- tail(burrows())
sel <- pointdf %>%
dplyr::select(name=BurrowNumber, Latitude, Longitude)
point <- cbind(sel$Longitude, sel$Latitude)%>% # generate coordinates
SpatialPoints(proj4string=CRS("+proj=longlat + ellps=WGS84")) %>% # convert to spatial points and add projection
SpatialPointsDataFrame(sel) # rejoin rest of point info and convert to spatial df
pointName <- sprintf("D:\\\\Garmin\\GPX\\Upload_%s.gpx", now()) # point name
writeOGR(point["name"], driver="GPX", layer="waypoints", dsn=pointName)
pointName <- sprintf("D:\Garmin\GPX\Upload_%s.gpx", now()) # point name
pointName <- sprintf("D:\\\\Garmin\\GPX\\Upload_%s.gpx", now()) # point name
writeOGR(point["name"], driver="GPX", layer="waypoints", dsn=pointName)
point["name"]
pointName
pointName <- sprintf("D:\\Garmin\\GPX\\Upload_%s.gpx", today()) # point name
writeOGR(point["name"], driver="GPX", layer="waypoints", dsn=pointName)
writeGPX(pointdf)
setwd("D:\\Garmin\\GPX") # set working directory to GPS unit
writeGPX(pointdf)
pointdf <- tail(burrows())
sel <- pointdf %>%
dplyr::select(name=BurrowNumber, Latitude, Longitude)
point <- cbind(sel$Longitude, sel$Latitude)%>% # generate coordinates
SpatialPoints(proj4string=CRS("+proj=longlat + ellps=WGS84")) %>% # convert to spatial points and add projection
SpatialPointsDataFrame(sel) # rejoin rest of point info and convert to spatial df
pointName <- sprintf("Upload_%s.gpx", today()) # point name
pointName
writeOGR(point["name"], driver="GPX", layer="waypoints", dsn=pointName)
runApp('//KRCSERVER/22_MeerkatManagers/01_MANAGEMENT/2.DataWork/1.Development/MeerkatDatabase2.0/ManagementQueries/app_WholeSheBang/WholeSheBang')
burrowChoices <- burrows() %>% pull(BurrowNumber)
runApp('//KRCSERVER/22_MeerkatManagers/01_MANAGEMENT/2.DataWork/1.Development/MeerkatDatabase2.0/ManagementQueries/app_WholeSheBang/WholeSheBang')
setwd("D:\\Garmin\\GPX") # set working directory to GPS unit
setwd("D:\\Garmin\\GPX") # set working directory to GPS unit
runApp('//KRCSERVER/22_MeerkatManagers/01_MANAGEMENT/2.DataWork/1.Development/MeerkatDatabase2.0/ManagementQueries/app_WholeSheBang/WholeSheBang')
shiny::runApp('//KRCSERVER/22_MeerkatManagers/01_MANAGEMENT/2.DataWork/1.Development/MeerkatDatabase2.0/ManagementQueries/app_WholeSheBang/WholeSheBang')
runApp('//KRCSERVER/22_MeerkatManagers/01_MANAGEMENT/2.DataWork/1.Development/MeerkatDatabase2.0/ManagementQueries/app_WholeSheBang/WholeSheBang')
runApp('//KRCSERVER/22_MeerkatManagers/01_MANAGEMENT/2.DataWork/1.Development/MeerkatDatabase2.0/ManagementQueries/app_WholeSheBang/WholeSheBang')
runApp('//KRCSERVER/22_MeerkatManagers/01_MANAGEMENT/2.DataWork/1.Development/MeerkatDatabase2.0/ManagementQueries/app_WholeSheBang/WholeSheBang')
runApp('//KRCSERVER/22_MeerkatManagers/01_MANAGEMENT/2.DataWork/1.Development/MeerkatDatabase2.0/ManagementQueries/app_WholeSheBang/WholeSheBang')
runApp('//KRCSERVER/22_MeerkatManagers/01_MANAGEMENT/2.DataWork/1.Development/MeerkatDatabase2.0/ManagementQueries/app_WholeSheBang/WholeSheBang')
runApp('//KRCSERVER/22_MeerkatManagers/01_MANAGEMENT/2.DataWork/1.Development/MeerkatDatabase2.0/ManagementQueries/app_WholeSheBang/WholeSheBang')
runApp('//KRCSERVER/22_MeerkatManagers/01_MANAGEMENT/2.DataWork/1.Development/MeerkatDatabase2.0/ManagementQueries/app_WholeSheBang/WholeSheBang')
runApp('//KRCSERVER/22_MeerkatManagers/01_MANAGEMENT/2.DataWork/1.Development/MeerkatDatabase2.0/ManagementQueries/app_WholeSheBang/WholeSheBang')
setwd("D:\\Garmin\\GPX") # set working directory to GPS unit
setwd("D:\\Garmin\\GPX") # set working directory to GPS unit
getwd()
setwd("D:\\Garmin\\GPX") # set working directory to GPS unit
runApp('//KRCSERVER/22_MeerkatManagers/01_MANAGEMENT/2.DataWork/1.Development/MeerkatDatabase2.0/ManagementQueries/app_WholeSheBang/WholeSheBang')
?tryCatch()
tryCatch(1, finally = print("Hello"))
e <- simpleError("test error")
stop(e)
tryCatch(stop(e), finally = print("Hello"))
e <- simpleError("test error")
stop(e)
setwd("asd")
setwd("asd")
tryCatch(stop("Error in setwd"), finally = print("Hello"))
setwd("asd")
tryCatch("Error in setwd", finally = print("Hello"))
setwd("asd")
tryCatch(stop("Error in setwd"))
setwd("asd")
tryCatch(stop("Error in setwd"), finally = print("Hello"))
setwd("asd")
tryCatch(stop("Error in setwd"), finally = print("Hello"))
tryCatch(stop("Error in setwd"), finally = print("True"))
setwd("asd")
if(setwd("asd") == "Error")
e
setwd("asd")
tryCatch(setwd("asd"), finally = print("True"))
tryCatch(setwd("asd"))
